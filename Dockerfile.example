FROM debian:11
ARG ROOT_AUTHORIZED_KEYS=""

# Install packages.
#
# Don't clear the cache unless you are planning to install exactly the right
# packages here and never again.  If you will be running apt-get update
# immediately upon boot, just leave it and save the world a little
# wire-warming.
#
# Another point of difference between containers you'd use as a container and
# containers you'd use as a VM: if you plan to use differencing disks, and plan
# on keeping the base disk up to date by updating it regularly and replacing
# your VMs which extend from it, you will then also want your base VM disk to
# have the sum or a superset of all packages that will run on your instances.
#
# And one final point: individual layer size doesn't matter.  Don't try to run
# everything in one RUN.  It makes it hard to read and cache for no reason
# since we export a flat image at the end.
#
# Caveat: you need to occasionally clear your cache to cause apt-get update to
#         run again.  This is still preferable to updating and installing
#         _everything_ _every_ time, just to be clear.
#
# TL;DR: this won't be used in docker -- do things that make sense for VMs.
#

# Packages required for a working system
RUN apt-get -q update
RUN apt-get install -yq linux-image-cloud-amd64
RUN apt-get install -yq systemd-sysv
RUN apt-get install -yq dbus-user-session
RUN apt-get install -yq openssh-server openssh-client
RUN apt-get install -yq e2fsprogs
# End Packages

# Packages for getting work done
RUN apt-get install -yq gnupg2
RUN apt-get install -yq curl
RUN curl https://packages.microsoft.com/keys/microsoft.asc | apt-key add -
RUN echo "deb [arch=amd64] https://packages.microsoft.com/repos/microsoft-debian-bullseye-prod bullseye main" > /etc/apt/sources.list.d/microsoft.list
RUN apt-get -q update
RUN apt install -yq powershell
RUN apt install -yq gss-ntlmssp
RUN pwsh -c 'Set-PSRepository -Name psgallery -InstallationPolicy Trusted;install-module -scope allusers pswsman;install-wsman'
# End Packages

# Packages for my sanity
RUN apt-get install -yq moreutils
RUN apt-get install -yq man 
RUN apt-get install -yq socat 
RUN apt-get install -yq netcat-openbsd
RUN apt-get install -yq iproute2
RUN apt-get install -yq bind9-dnsutils
RUN apt-get install -yq iputils-ping
RUN apt-get install -yq bash
RUN apt-get install -yq neovim
RUN apt-get install -yq strace
RUN apt-get install -yq less
RUN apt-get install -yq hyperv-daemons
RUN apt-get install -yq sudo && sed -i -E -e '/^(%sudo|root)/ s/ALL$/NOPASSWD: ALL/' /etc/sudoers
# End Packages

# Service to ensure the resolved stub file is symlinked.  This can't be done directly
# because docker mounts a resolv.conf while controlling the build container.
RUN printf '%s\n'                                                                         \
      '[Unit]'                                                                            \
      'Description=Setup systemd-resolved stub'                                           \
      'Before=systemd-resolved.service'                                                   \
      ''                                                                                  \
      '[Service]'                                                                         \
      'ExecStart=/bin/ln -bsf /var/run/systemd/resolve/stub-resolv.conf /etc/resolv.conf' \
      'Type=oneshot'                                                                      \
      ''                                                                                  \
      '[Install]'                                                                         \
      'RequiredBy=systemd-resolved.service'                                               \
    > /lib/systemd/system/systemd-resolved-stub-installer.service 
RUN systemctl enable systemd-resolved-stub-installer.service
# End Service

# Service to create a hostname from /boot or randomly if one doesn't exist yet.
RUN printf '%s\n'                                                                                         \
      '#!/bin/bash'                                                                                       \
      'if [ -e /boot/hostname ];then'                                                                     \
      '    echo "found /boot/hostname override file."'                                                    \
      '    hostnamectl set-hostname $(cat /boot/hostname)'                                                \
      '    exit 0'                                                                                        \
      'fi'                                                                                                \
      ''                                                                                                  \
      'if [ -e /etc/hostname ];then'                                                                      \
      '    echo "hostname file already exists.  skipping setup."'                                         \
      '    exit 0'                                                                                        \
      'fi'                                                                                                \
      ''                                                                                                  \
      'SLUGS=$(dd if=/dev/random bs=64 count=1 | base64 | tr A-Z a-z | grep -Eo "[0-9a-z]{3}" | head -3)' \
      'hostnamectl set-hostname $(printf %s-%s-%s $SLUGS)'                                                \
    > /usr/sbin/configure-hostname

RUN chmod 755 /usr/sbin/configure-hostname

RUN printf '%s\n'                               \
      '[Unit]'                                  \
      'Description=Ensure machine has hostname' \
      'Before=systemd-networkd.service'         \
      ''                                        \
      '[Service]'                               \
      'ExecStart=/usr/sbin/configure-hostname'  \
      'Type=oneshot'                            \
      ''                                        \
      '[Install]'                               \
      'WantedBy=multi-user.target'              \
    > /lib/systemd/system/ensure-machine-hostname.service
RUN systemctl enable ensure-machine-hostname.service
# End Service

# Service to create ssh host keys if they're missing
RUN printf '%s\n'                                                               \
      '[Unit]'                                                                  \
      'Description=Ensure machine has ssh keys'                                 \
      'Before=ssh.service'                                                      \
      ''                                                                        \
      '[Service]'                                                               \
      'ExecStart=/usr/sbin/dpkg-reconfigure openssh-server --f noninteractive'  \
      'Type=oneshot'                                                            \
      ''                                                                        \
      '[Install]'                                                               \
      'RequiredBy=ssh.service'                                                  \
    > /lib/systemd/system/ensure-ssh-hostkeys.service
RUN systemctl enable ensure-ssh-hostkeys.service
# End Service

# Configuration for otherwise-unconfigured network interfaces
RUN mkdir -p /etc/systemd/network
RUN printf '%s\n'                                   \
      '[Match]'                                     \
      'Name=*'                                      \
      ''                                            \
      '[Network]'                                   \
      'DHCP=yes'                                    \
      ''                                            \
      '[DHCPv4]'                                    \
      'ClientIdentifier=mac'                        \
    > /etc/systemd/network/99-dhcp.network
# End Configuration

# Enable services
RUN systemctl enable systemd-networkd
RUN systemctl enable systemd-resolved
RUN systemctl enable ssh
RUN systemctl enable dbus
RUN systemctl enable getty@ttyS0
# End Enable

# Set root password to "root"
RUN printf '%s\n' root root | passwd

# Configuration of root authorized keys file based on build arg.
# Use with --build-arg ROOT_AUTHORIZED_KEYS="ssh-ed25519 AAAA..."
# Also accepts backslash encoded escape chars (echo -e style)
RUN mkdir -p /root/.ssh
RUN printf '%b\n' "${ROOT_AUTHORIZED_KEYS}" > /root/.ssh/authorized_keys
RUN chown -R root:root /root
RUN chmod 600 /root/.ssh/authorized_keys
# End Configuration

# sysprep time
RUN rm -f \
    /etc/machine-id \
    /var/lib/dbus/machine-id \
    /etc/ssh/ssh_host_*_key* \
    /var/lib/systemd/random-seed \
    /var/lib/systemd/credential.secret \
    /etc/hostname \
    /.dockerenv
